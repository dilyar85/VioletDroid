{
  "name": "Violetdroid",
  "tagline": "Android Application for Drawing UML Diagrams",
  "body": "# Introduction \r\n\r\nVioletDroid is an Android app that allows users to draw **UML** diagrams on their phones and tablets.  \r\n\r\n<img src=\"https://raw.githubusercontent.com/dilyar85/TwoThreeTree-Java/master/screenshots/main_screen.png\" height=\"500\" >\r\n\r\n\r\n# Android Framework\r\n* VioletDroid uses Activity - Fragment template to accomplish its major feature. \r\n<img src=\"https://raw.github.com/dilyar85/TwoThreeTree-Java/master/screenshots/activity_fragment_pkg.png\" alt=\"activity_fragment_img\" height=\"350\"> \r\n\r\n* RecyclerView with corresponding adapter displays the elements needed in UML diagrams.  \r\n<img src=\"https://raw.github.com/dilyar85/TwoThreeTree-Java/master/screenshots/adapter_pkg.png\" alt=\"recycler_adapter_img\" height=\"350\" > \r\n\r\n* Custom View class to display and modify current diagrams.  \r\n<img src=\"https://raw.github.com/dilyar85/TwoThreeTree-Java/master/screenshots/view_pkg.png\" alt=\"customview_img\" height=\"350\" > \r\n\r\n\r\n# Design Patterns\r\nVioletDroid uses three major design patterns: Decorator Pattern, Composite Pattern, and Observer Pattern.\r\n\r\n* **Decorator Pattern**：  \r\nRecyclerAdapter class extends Android’s native RecyclerView.Adapter to display the icons in the toolbar menu as a scrolling dataset of images.  This is an example of the decorator pattern used in the Android API—RecyclerView essentially decorates an Android ViewGroup to provide the additional scrolling functionality and link to a dataset of assets for the view.  The following table represents this pattern:  \r\n<img src=\"https://raw.github.com/dilyar85/TwoThreeTree-Java/master/screenshots/dec_pattern.png\" alt=\"pattern_img\" height=\"200\">\r\n\r\n* **Composite Pattern**：  \r\nThe composite pattern is used in the VioletDroid CanvasLayout class which extends Android’s native RelativeLayout class, which extends the ViewGroup abstract class which extends View.  So CanvasLayout is a ViewGroup, which is a View that can contain other Views.  The following table represents this pattern in our project:  \r\n<img src=\"https://raw.github.com/dilyar85/TwoThreeTree-Java/master/screenshots/composite_pattern.png\" alt=\"pattern_img\" height=\"200\">\r\n\r\n* **Observer Pattern**：  \r\nThe observer pattern is another very common occurrence in User Interface design, particularly with Graphical User Interfaces, since the signal for the application to do something comes from the user’s interaction with elements on-screen, those elements must somehow notify the application what has happened - hence the listeners involved in an observer pattern:  \r\n<img src=\"https://raw.github.com/dilyar85/TwoThreeTree-Java/master/screenshots/observer_pattern.png\" alt=\"pattern_img\" height=\"200\">\r\n\r\n# Service Framework\r\nWe utilized a cloud service framework in our project to facilitate user account maintenance and saving of diagrams.   We mention it here because it provides our project with a huge suite of services that we didn’t actually have to code ourselves, but merely \r\nimport com.avos.avoscloud.AVOSCloud; \r\nand add 3 lines of initialization for the framework at app startup.  \r\n<img src=\"https://raw.github.com/dilyar85/TwoThreeTree-Java/master/screenshots/leancloud_icon.png\" alt=\"service_img\" height=\"300\" align=\"center\">\r\n\r\n\r\n# Run Demo\r\n1. Start your emulator (highly recommend Genymotion)\r\n2. Via bash, navigate to the VioletDroid project folder: `~ $ cd the_path_to_violetdroid_in_your_laptop/`\r\n3. Execute just one line in your terminal: `~ $ ./exec.sh`\r\n\r\n\r\n# Downloads  \r\n<a href='https://play.google.com/store/apps/details?id=com.dilyar.weather.app&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img height=\"150\" alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/></a>\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}